AWSTemplateFormatVersion: "2010-09-09"
Description: If not existing generate DDB table about SIM with a given name

Parameters:
  #=======================================================
  #
  #                   CloudFormation Parameters
  #
  #=======================================================
  DbdSimTableName:
    Type: String
    Default: sim-metastore-meeq2
    Description: SIM Table Name

Resources:
  #=======================================================
  #
  #             DynamoDB SIM table resources
  #
  #=======================================================
#  SimTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      AttributeDefinitions:
#        - AttributeName: PK
#          AttributeType: S
#        - AttributeName: SK
#          AttributeType: S
#      KeySchema:
#        - AttributeName: PK
#          KeyType: HASH
#        - AttributeName: SK
#          KeyType: RANGE
#      BillingMode: PAY_PER_REQUEST
#      TableName:
#        Ref: SimTableName

  CreateTableLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                  - dynamodb:CreateTable
                  - dynamodb:DescribeTable
                Resource: "*"
        - PolicyName: 'LambdaOutputLogsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  CreateTableFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt CreateTableLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import os
          import boto3
          import json
          import cfnresponse

          def handler(event, context):
              print("event ", event, " context ", context)
              if event['RequestType'] == "Delete" :
                  responseData = {}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  return

              dynamodb = boto3.client('dynamodb')
              table_name = os.environ.get('TABLE_NAME')

              # Check if the table exists
              existing_tables = dynamodb.list_tables()['TableNames']
              if table_name not in existing_tables :
                  # Table does not exist, create the table
                  table = dynamodb.create_table(
                      TableName=table_name,
                      AttributeDefinitions=[
                          {
                              'AttributeName': 'PrimaryKey',
                              'AttributeType': 'S'
                          }
                      ],
                      KeySchema=[
                          {
                              'AttributeName': 'PrimaryKey',
                              'KeyType': 'HASH'
                          }
                      ],
                      ProvisionedThroughput={
                          'ReadCapacityUnits': 5,
                          'WriteCapacityUnits': 5,
                      }
                  )
                  print("After create_table():", " table ", table)

                  #return {
                  #    'statusCode': 200,
                  #    'body': json.dumps(f'Table {table_name} created successfully.'),
                  #    'TableName': table['TableDescription']['TableName'],
                  #    'TableArn': table['TableDescription']['TableArn'],
                  #}
                  responseData = {}
                  responseData['TableName'] = table['TableDescription']['TableName']
                  responseData['TableArn'] = table['TableDescription']['TableArn']
                  #cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
                  print("Table create OK")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
              else :
                  # テーブルの詳細を取得
                  table = dynamodb.describe_table(TableName=table_name)
                  print("After describe_table():", " table ", table)

                  ## table_arn = dynamodb.describe_table(TableName=table_name)['Table']['TableArn']
                  #return {
                  #    'statusCode': 200,
                  #    'body': json.dumps(f'Table {table_name} already exists.'),
                  #    'TableName': None,
                  #    # 'TableArn': table_arn,
                  #    'TableArn': None,
                  #}
                  responseData = {}
                  responseData['TableName'] = table['Table']['TableName']
                  responseData['TableArn'] = table['Table']['TableArn']
                  #cfnresponse.send(event, context, cfnresponse.None, responseData, "CustomResourcePhysicalID")
                  print("No need to create Table because already exist")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref DbdSimTableName

#  LambdaInvokePermission:
#    Type: AWS::Lambda::Permission
#    Properties:
#      Action: lambda:InvokeFunction
#      Principal: s3.amazonaws.com
#      FunctionName: !GetAtt CreateTableFunction.Arn
#      SourceAccount: !Ref AWS::AccountId

  CreateTable:
    Type: Custom::CreateTableFunction
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CreateTableFunction
          - Arn

Outputs:
  #=======================================================
  #
  #                 CloudFormation Outputs
  #
  #=======================================================
  DdbCreatedSimTableName:
    Description: The name of the newly create SIM Table
    Value:
#      Ref: SimTable
#      Ref: CreateTableFunction.TableName
      Fn::GetAtt:
        - CreateTable
        - TableName

#  DdbSimTableArn:
#    Description: The ARN of the newly create SIM Table
#    Value:
#      Fn::GetAtt:
#        - SimTable
#        - Arn

  DdbCreatedSimTableArn:
    Description: ARN of the DynamoDB table created or checked by the Lambda function
    Value: #!GetAtt CreateTableFunction.TableArn
      Fn::GetAtt:
        - CreateTable
        - TableArn

